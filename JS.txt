<html>
<head>
		<script>
			function Myfunction()
			{
				document.write("Krushna")

			}
		</script>
	<body>
		<script>
			Myfunction()
		</script>
	</body>
</head>

</html>
--------------------------------
Escape sequence : ex. "Shiv\'kumar" , \n- new line \t-tab \r- carriage return
--
.toUpperCase()
--
.toLowerCase()
--
slice(2,4) = this will breck the string and will strat to show charactors from 2 letter to 3 rd letter.
*- slice(2)= from 2 nd letter to end letter.
---
*- splice(2,3,21,22,23)= from 2nd element delete 3 elemets and replace with 21, 22,23or you can add there as you want.
--
.replace("1st","2nd") =replace 1st by 2nd. it will match the exact charactor even the upper/lower case letter.
--
.concat(1st, 2nd) = will join the both string. you can concat multiple string within it.
-----
.trim() = this will trim the empty spaces in beggining and at ending.
----
let fr="Shiv"
fr[0] is S
fr[1] will show the h and fr[2] will show the i
string are immutable.
---------
str1.includes(str2) this will true or false by checking if str2 is included in str1?
-------
Array 
- push() and pop() will work on last element of the array.
- shift() and unshift will act on the begining element of the array. modifyes original array.
- sort() == this sort the array in alphabetically keep this in mind, as sroted eg:  1, 100, 21,5,7545, 89 etc. assumers array as a string and starts 
the sorting from the first element of the repective valu, like in 100 first char is 1 in 21 first char is 2 etc.
-----------**********--------
to copy the const array into an empty const array example:

const arr1 = []; // Array with initial elements
const arr2 = [1, 2, 3]; // Array with elements to be copied

arr1.splice(0, arr1.length, ...arr2);
console.log(arr1); // [1, 2, 3]
--------------------------------------
for each, for of= returns the array value, for in= returns array key, Array.from(num)
-----
Map, filter, reduce,

Map::- it will work same as a foreach, however it creates new array and it can return values.
let a= arr.map((value)=>{return value}) // you can perform any operation on the element and then return to new array. we can pass up to three element, like: 
value, index, array. 
Filter::- we can write a filter function with specific condition and it will return the true values to the new arrays it will not modify the existing array.
reduce::- will return the one value, like adding all array element and return only one value of additon.

